{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://kombai/./src/vsc/panelProvider.ts","webpack://kombai/external commonjs \"vscode\"","webpack://kombai/webpack/bootstrap","webpack://kombai/webpack/runtime/compat get default export","webpack://kombai/webpack/runtime/define property getters","webpack://kombai/webpack/runtime/hasOwnProperty shorthand","webpack://kombai/webpack/runtime/make namespace object","webpack://kombai/./src/vsc/extension.ts"],"sourcesContent":["// Description: For creating and managing webview panel in VS code extension.\n\nimport * as vscode from 'vscode';\n\n\nexport function getHtmlForWebview(\n  webview: vscode.Webview,\n  extensionUri: vscode.Uri,\n  extensionPath: string,\n  scripts: string[],\n  styles: string[],\n\n  viewType: string,\n) {\n  // Use a nonce to only allow a specific script to be run.`\n  // const nonce = getNonce();\n\n  const asWebviewUri = (file: string) => {\n    // const r = `vscode-resource:${[extensionPath, 'dist', file].join('/')}`;\n    const r = webview.asWebviewUri(vscode.Uri.joinPath(extensionUri,'dist', file));\n    return r;\n  };\n\n  const urlHandleFunction = `\n       window.handlePublicUrl = function(url) {\n        const newUrl = \"vscode-resource:${extensionPath}/dist/\" + url.slice(1);\n        return newUrl;\n       } \n`;\n\n\n\n  return `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n        <meta name=\"viewType\" content=\"${viewType}\">\n\n        \n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'unsafe-inline' 'unsafe-eval' 'self' blob: ${\n          webview.cspSource\n        } https://api.figma.com https://*.amazonaws.com; style-src 'unsafe-inline' ${\n    webview.cspSource\n  }; img-src 'self' data: ${webview.cspSource};\">\n        \n\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n\t\t\t</head>\n\t\t\t<body>\n        ${urlHandleFunction ? `<script>${urlHandleFunction}</script>` : ''}\n\n        ${scripts\n          .map(\n            (scriptFile) => `\n          <!--${asWebviewUri(scriptFile)}-->\n        <script src=\"${asWebviewUri(scriptFile)}\"></script>`,\n          )\n          .join('\\n')}   \n\t\t\t</body>\n\t\t\t</html>`;\n}\n\n// export function wireWebview(\n//   panel: { webview: vscode.Webview; onDidDispose: vscode.Event<void> },\n//   context: vscode.ExtensionContext,\n// ) {\n//   function postMessage(msg: Message) {\n//     panel.webview.postMessage(msg);\n//   }\n\n//   panel.webview.onDidReceiveMessage(dispatcher.dispatch.bind(dispatcher), null, context.subscriptions);\n//   const listenerKey = dispatcher.addListener(postMessage);\n//   panel.onDidDispose(\n//     () => {\n//       dispatcher.removeListener(listenerKey);\n//     },\n//     null,\n//     context.subscriptions,\n//   );\n// }\n\nexport class WebviewProvider implements vscode.WebviewViewProvider {\n  // public static readonly viewType = 'activitybar.kombai';\n\n  private _view?: vscode.WebviewView;\n\n  constructor(\n    private readonly _context: vscode.ExtensionContext,\n    public readonly viewType: string,\n    public readonly fileName: string,\n  ) {}\n\n  resolveWebviewView(\n    panel: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext<unknown>,\n    token: vscode.CancellationToken,\n  ): void | Thenable<void> {\n    this._view = panel;\n\n    panel.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [this._context.extensionUri],\n    };\n\n    panel.webview.html = getHtmlForWebview(\n      panel.webview,\n      this._context.extensionUri,\n      this._context.extensionPath,\n      [this.fileName],\n      [],\n      this.viewType,\n    );\n\n\n    // const listenerKey = dispatcher.addListener(postMessage);\n\n    //wireWebview(webviewView, this._dispatcher, this._context);\n  }\n}\nexport function createOrShowWebview(\n  context: vscode.ExtensionContext,\n  panels: Map<string, vscode.WebviewPanel>,\n  // dispatcher: Dispatcher,\n  viewType: string,\n  title: string,\n  manifestFile: string,\n) {\n  const column = vscode.window.activeTextEditor ? vscode.window.activeTextEditor.viewColumn : undefined;\n  const currentPanel = panels.get(viewType);\n\n  // If we already have a panel, show it.\n  if (currentPanel) {\n    currentPanel.reveal(column);\n    return;\n  }\n\n  // Otherwise, create a new panel.\n\n  const panel = vscode.window.createWebviewPanel(viewType, title, vscode.ViewColumn.One, {\n    enableScripts: true,\n    localResourceRoots: [context.extensionUri],\n    retainContextWhenHidden: true,\n  });\n\n    panel.webview.html = getHtmlForWebview(\n    panel.webview,\n    context.extensionUri,\n    context.extensionPath,\n    [manifestFile],\n    [],\n    panel.viewType,\n  );\n\n  //wireWebview(panel, dispatcher, context);\n\n  //panels.set(viewType, panel);\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//Description: Main loading JS file for VS code extension.\n\nimport * as vscode from 'vscode';\nimport { WebviewProvider } from './panelProvider';\n\n\nexport async function activate(context: vscode.ExtensionContext) {\n  const codePanelProvider = new WebviewProvider(\n    context,\n    'activitybar.codePanel',\n    'renderCollection.js',\n  );\n\n  console.log(context.extensionPath);\n\n  // Code Panel registered here\n\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(codePanelProvider.viewType, codePanelProvider, {\n      webviewOptions: {\n        retainContextWhenHidden: true,\n      },\n    }),\n  );\n\n}\n\n//Abhijit's old code\n\n// const listeners = {\n//   openEditorPanel: function ({ msg }: Message) {\n//     if (msg === 'something_clicked') {\n//       createOrShowWebview(context, panels, dispatcher, 'editor.kombai.figmaLarge', 'Kombai');\n//     }\n//   },\n// };\n\n// Object.entries(listeners).forEach(([key, listener]) => {\n//   if (!key.startsWith('_')) dispatcher.addListener(listener);\n// });\n"],"names":["vscode","getHtmlForWebview","webview","extensionUri","extensionPath","scripts","styles","viewType","asWebviewUri","file","r","Uri","joinPath","urlHandleFunction","cspSource","map","scriptFile","join","WebviewProvider","_context","fileName","panel","context","token","_view","options","enableScripts","localResourceRoots","html","createOrShowWebview","panels","title","manifestFile","column","window","activeTextEditor","viewColumn","undefined","currentPanel","get","reveal","createWebviewPanel","ViewColumn","One","retainContextWhenHidden","activate","codePanelProvider","console","log","subscriptions","push","registerWebviewViewProvider","webviewOptions"],"sourceRoot":""}